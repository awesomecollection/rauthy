name: Build and Push Docker Image

on:
  push:
    branches: ["main"]
    tags: ["v*"]
  pull_request:
    branches: ["main"]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  CARGO_TERM_COLOR: always

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          targets: |
            x86_64-unknown-linux-gnu
            aarch64-unknown-linux-gnu
          components: rustfmt, clippy
          override: true

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDPLATFORM=${{ runner.os }}
            TARGET_USER=10001:10001

  verify:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    services:
      postgres:
        image: postgres:17.2-alpine
        env:
          POSTGRES_USER: rauthy
          POSTGRES_PASSWORD: 123SuperSafe
          POSTGRES_DB: rauthy
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository  # Add checkout for sqlx-cli
        uses: actions/checkout@v4

      - name: Verify image exists
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          TAG="${{ github.sha }}"
          docker pull "$IMAGE:$TAG"
          echo "✅ Image pull successful"

      - name: Create test network
        run: docker network create rauthy-dev

      - name: Connect postgres to network
        run: |
          docker network connect rauthy-dev $(docker ps -q -f "ancestor=postgres:17.2-alpine")

      - name: Install sqlx-cli
        run: cargo install sqlx-cli --no-default-features --features rustls,postgres

      - name: Start application container
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          TAG="${{ github.sha }}"
          docker run -d \
            --name rauthy-test \
            --network rauthy-dev \
            -e DATABASE_URL=postgresql://rauthy:123SuperSafe@postgres:5432/rauthy \
            -p 8080:8080 \
            "$IMAGE:$TAG"

      - name: Wait for application startup
        run: |
          attempt_counter=0
          max_attempts=30
          
          until $(curl --output /dev/null --silent --head --fail http://localhost:8080/health); do
              if [ ${attempt_counter} -eq ${max_attempts} ];then
                echo "Max attempts reached. Application failed to start"
                docker logs rauthy-test
                exit 1
              fi
              
              printf '.'
              attempt_counter=$(($attempt_counter+1))
              sleep 5
          done
          echo "✅ Application is up and running"

      - name: Verify admin login
        run: |
          TOKEN=$(curl -s -X POST http://localhost:8080/auth/token \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "grant_type=password" \
            -d "username=admin@localhost.de" \
            -d "password=123SuperSafe" \
            | jq -r '.access_token')
          
          if [ "$TOKEN" != "null" ] && [ ! -z "$TOKEN" ]; then
            echo "✅ Successfully obtained admin token"
            
            # Verify token works by making an authenticated request
            RESPONSE=$(curl -s -X GET http://localhost:8080/api/v1/admin/status \
              -H "Authorization: Bearer $TOKEN")
            
            if echo "$RESPONSE" | jq -e . >/dev/null 2>&1; then
              echo "✅ Successfully made authenticated admin request"
            else
              echo "❌ Failed to make authenticated admin request"
              exit 1
            fi
          else
            echo "❌ Failed to obtain admin token"
            docker logs rauthy-test
            exit 1
          fi

      - name: Check container logs
        if: always()
        run: docker logs rauthy-test

      - name: Check image metadata
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          TAG="${{ github.sha }}"
          docker inspect "$IMAGE:$TAG"

      - name: Cleanup
        if: always()
        run: |
          docker rm -f rauthy-test || true
          docker network rm rauthy-dev || true

  notify:
    needs: [build-and-push, verify]
    runs-on: ubuntu-latest
    if: always() && github.event_name != 'pull_request'

    steps:
      - name: Set status
        id: status
        run: |
          if [[ "${{ needs.build-and-push.result }}" == "success" && "${{ needs.verify.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi

      - name: Create status check
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ steps.status.outputs.status }}'
            const sha = '${{ github.sha }}'
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: sha,
              state: status,
              target_url: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}',
              description: status === 'success' ? 'Build and verification successful' : 'Build or verification failed',
              context: 'CI/CD Pipeline'
            })