name: Build and Push Docker Image

on:
  push:
    branches: ["main"]
    tags: ["v*"]
  pull_request:
    branches: ["main"]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  CARGO_TERM_COLOR: always

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    services:
      postgres:
        image: postgres:17.2-alpine
        env:
          POSTGRES_USER: rauthy
          POSTGRES_PASSWORD: 123SuperSafe
          POSTGRES_DB: rauthy
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Wait for PostgreSQL
        run: |
          while ! pg_isready -h localhost -p 5432 -U rauthy; do
            sleep 1
          done
        env:
          PGPASSWORD: 123SuperSafe

      - name: Verify PostgreSQL connection
        run: |
          PGPASSWORD=123SuperSafe psql -h localhost -U rauthy -d rauthy -c '\l'
        env:
          PGPASSWORD: 123SuperSafe

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-unknown-linux-gnu
          target: aarch64-unknown-linux-gnu
          components: rustfmt, clippy
          override: true

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install sqlx-cli
        run: cargo install sqlx-cli --no-default-features --features rustls,postgres

      - name: Run database migrations
        run: cargo sqlx migrate run --source migrations/postgres
        env:
          DATABASE_URL: postgresql://rauthy:123SuperSafe@localhost:5432/rauthy

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Build frontend
        run: |
          cd frontend
          npm ci
          npm run build
          cd ..

      - name: Run tests
        run: cargo test --workspace
        env:
          DATABASE_URL: postgresql://rauthy:123SuperSafe@localhost:5432/rauthy
          HIQLITE: "false"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDPLATFORM=${{ runner.os }}
            TARGET_USER=10001:10001
            DATABASE_URL=postgresql://rauthy:123SuperSafe@localhost:5432/rauthy

  verify:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
      - name: Verify image exists
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          TAG="${{ github.sha }}"
          docker pull "$IMAGE:$TAG"
          echo "âœ… Image verification successful"

      - name: Check image metadata
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          TAG="${{ github.sha }}"
          docker inspect "$IMAGE:$TAG"

  notify:
    needs: [build-and-push, verify]
    runs-on: ubuntu-latest
    if: always() && github.event_name != 'pull_request'

    steps:
      - name: Set status
        id: status
        run: |
          if [[ "${{ needs.build-and-push.result }}" == "success" && "${{ needs.verify.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi

      - name: Create status check
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ steps.status.outputs.status }}'
            const sha = '${{ github.sha }}'
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: sha,
              state: status,
              target_url: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}',
              description: status === 'success' ? 'Build and verification successful' : 'Build or verification failed',
              context: 'CI/CD Pipeline'
            })
