# .github/workflows/build-push.yml

name: Build and Push Docker Image

# Controls when the workflow will run
on:
  push:
    branches: [ main ]     # Trigger on pushes to the main branch
    tags: [ 'v*.*.*' ]     # Trigger on version tags like v1.0.0
  workflow_dispatch:       # Allow manual triggering from the Actions tab

jobs:
  build-and-push:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner
    permissions:
      contents: read      # Permission to read repository content
      packages: write     # Permission to write packages (push to GHCR)

    # Define service containers required by the job/build
    services:
      # Service definition for PostgreSQL database
      postgres:
        image: postgres:17.2-alpine # Use a specific PostgreSQL version (recommended)
        env:
          # Set credentials for the database service
          # IMPORTANT: Ensure these match the DATABASE_URL used in the build-args below
          # and what the build process expects (e.g., for sqlx compile-time checks)
          POSTGRES_USER: rauthy
          POSTGRES_PASSWORD: 123SuperSafe # Use secrets.POSTGRES_PASSWORD if build doesn't require specific hardcoded one
          POSTGRES_DB: rauthy
        ports:
          # Expose port 5432 within the service network (not necessarily to the host runner)
          - 5432:5432
        # Health check options to ensure the database is ready before proceeding
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # Step 1: Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Log in to the GitHub Container Registry (GHCR)
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          # Use the automatically generated GITHUB_TOKEN for authentication
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 3: Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 4: Extract metadata (tags, labels) for Docker
      # This helps generate appropriate tags based on the event (branch, tag, sha)
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          # Define the image name on GHCR
          # Uses the repository owner and assumes 'rauthy' as the repo/image name. Adjust if needed.
          images: ghcr.io/${{ github.repository_owner }}/rauthy
          tags: |
            # Tag 'latest' only for pushes to the default branch (usually 'main')
            type=raw,value=latest,enable={{is_default_branch}}
            # Tag with the Git commit SHA (short format)
            type=sha,format=short
            # Tag with the Git tag name if the workflow was triggered by a tag push
            type=ref,event=tag

      # Step 5: Build and push the Docker image using buildx
      - name: Build and push Docker image
        id: build-push
        uses: docker/build-push-action@v5
        with:
          context: . # Use the current directory as the build context
          file: ./Dockerfile # Specify the path to your Dockerfile
          platforms: linux/amd64,linux/arm64 # Target platforms
          # Push the image only if the event is not a pull request (i.e., push to main or tag)
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }} # Use tags generated by the metadata action
          labels: ${{ steps.meta.outputs.labels }} # Use labels generated by the metadata action
          # Pass build arguments to the Dockerfile
          build-args: |
            # Provide the DATABASE_URL pointing to the 'postgres' service container
            # Ensure user/password/db match the service definition above
            DATABASE_URL=postgresql://rauthy:123SuperSafe@postgres:5432/rauthy
            # You can pass other ARGs defined in your Dockerfile here if needed
            # RUST_VERSION=1.85
            # NODE_VERSION=18
          # Enable build caching using GitHub Actions cache
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Optional Step 6: Output the resulting image digest
      # - name: Print image digest
      #   run: echo ${{ steps.build-push.outputs.digest }}

